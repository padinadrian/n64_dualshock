/**
 * File:    n64_dualshock.ino
 * Author:  padin.adrian@gmail.com
 *
 * Copyright 2019
 */

/* ===== Includes ====== */
#define EMBEDDED_TOOLS_BASE_DIRECTORY "C:\\Users\\apadi\\Documents\\projects\\n64_dualshock\\"
// #include EMBEDDED_TOOLS_BASE_DIRECTORY "/gpio/adrian_spi_trinket.hpp"
// #include EMBEDDED_TOOLS_BASE_DIRECTORY "/spi/adrian_spi_trinket.hpp"
// #include "ps2/adrian_dualshock.hpp"
// #include "C:\\Users\\apadi\\Documents\\projects\\n64_dualshock\\embedded_tools/n64/adrian_n64_console.hpp"
#include "C:\\Users\\apadi\\Documents\\projects\\n64_dualshock\\embedded_tools/gpio/adrian_gpio_arduino.hpp"
#include "C:\\Users\\apadi\\Documents\\projects\\n64_dualshock\\embedded_tools/spi/adrian_spi_trinket.hpp"
#include "C:\\Users\\apadi\\Documents\\projects\\n64_dualshock\\embedded_tools/ps2/adrian_dualshock.hpp"
#include "C:\\Users\\apadi\\Documents\\projects\\n64_dualshock\\embedded_tools/n64/adrian_n64_console.hpp"

/* ===== Global ===== */

static adrian::TrinketSPI spi;
static adrian::ArduinoGPIO spi_select(3);
static adrian::ArduinoGPIO led(4);
static adrian::DualShock controller(&spi, &spi_select);

/* ===== SETUP ===== */

void setup()
{
    led.SetPinMode(adrian::GPIO::PIN_MODE_OUTPUT);
    led.Write(1);
    spi.Initialize();
}

/* ===== LOOP ===== */

void loop()
{
    // Poll from PS2 controller
    static adrian::DualShock::ButtonState buttons;
    controller.Poll(buttons);

    if (buttons.digital_valid && buttons.cross)
    {
        led.Write(1);
    }
    else
    {
        led.Write(0);
    }

    // delay(20);

    // led.Write(1);
    // delay(1000);
    // led.Write(0);
    // delay(1000);
}
